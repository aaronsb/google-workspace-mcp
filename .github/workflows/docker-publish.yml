name: Test, Build and Deploy

on:
  push:
    branches: [ main, fix/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint
        run: npm run lint

      - name: Run tests
        run: npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            DOCKER_HASH=${{ github.sha }}

  integration-test:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get image digest
        id: image
        run: |
          # Wait for image to be available (with timeout)
          MAX_ATTEMPTS=6
          ATTEMPT=1
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT to verify image availability..."
            if curl -s -f -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                "https://ghcr.io/v2/${{ github.repository }}/manifests/latest" > /dev/null; then
              break
            fi
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "Image not available after maximum attempts"
              exit 1
            fi
            ATTEMPT=$((ATTEMPT + 1))
            sleep 30
          done
          
          # Get digest using API
          DIGEST=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ github.repository }}/manifests/latest" \
            -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
            | jq -r '.config.digest')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Pull container
        run: |
          # Log in to registry to ensure we can pull private packages
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Pull with explicit error handling
          if ! docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.image.outputs.digest }}; then
            echo "Failed to pull by digest, attempting tag pull..."
            if ! docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest; then
              echo "Failed to pull image by tag. Current images:"
              docker images
              echo "Registry contents:"
              curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                "https://ghcr.io/v2/${{ github.repository }}/tags/list"
              exit 1
            fi
          fi
      
      - name: Set up test environment
        run: |
          # Create test directories with correct permissions
          mkdir -p logs config
          chmod 777 logs
          # Copy example config for testing only (production deployments manage their own config)
          cp config/accounts.example.json config/accounts.json

      - name: Set image reference
        id: imgref
        run: |
          # Use digest if available, otherwise use latest tag
          if docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.image.outputs.digest }} >/dev/null 2>&1; then
            echo "ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.image.outputs.digest }}" >> $GITHUB_OUTPUT
          else
            echo "ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          fi

      - name: Run integration tests
        run: |
          # Run tests with test directories mounted
          docker run -i \
            -e GOOGLE_CLIENT_ID=test-client-id \
            -e GOOGLE_CLIENT_SECRET=test-secret \
            -e LOG_FILE=/app/logs/integration-test.log \
            -v ${{ github.workspace }}/logs:/app/logs \
            -v ${{ github.workspace }}/config:/app/config \
            ${{ steps.imgref.outputs.ref }} \
            npm run test:integration

          # Display logs for debugging if tests fail
          if [ $? -ne 0 ]; then
            echo "Integration tests failed. Server logs:"
            cat logs/integration-test.log
            exit 1
          fi
      
      - name: Verify container health
        run: |
          docker run -i \
            -e GOOGLE_CLIENT_ID=test-client-id \
            -e GOOGLE_CLIENT_SECRET=test-secret \
            --health-cmd="node /app/build/health-check.js" \
            --health-interval=10s \
            ${{ steps.imgref.outputs.ref }}

  cleanup:
    name: Cleanup
    needs: [build-and-deploy, integration-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Remove old packages
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
